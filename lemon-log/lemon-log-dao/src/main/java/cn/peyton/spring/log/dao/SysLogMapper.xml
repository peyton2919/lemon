<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.peyton.spring.log.dao.SysLogMapper" >
  <resultMap id="BaseResultMap" type="cn.peyton.spring.log.entity.SysLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="target_id" property="targetId" jdbcType="VARCHAR" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP" />
    <result column="operate_ip" property="operateIp" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="ResultMapWithBLOBs" type="cn.peyton.spring.log.entity.SysLogWithBLOBs" extends="BaseResultMap" >
    <result column="old_value" property="oldValue" jdbcType="LONGVARCHAR" />
    <result column="new_value" property="newValue" jdbcType="LONGVARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >id, type, target_id, operator, operate_time, operate_ip, status</sql>

  <sql id="Blob_Column_List" > old_value, new_value</sql>

  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />,
    <include refid="Blob_Column_List" />
    from sys_log
    where id = #{id}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_log
    where id = #{id}
  </delete>

  <insert id="insert" parameterType="cn.peyton.spring.log.entity.SysLogWithBLOBs"
          keyProperty="id" useGeneratedKeys="true" >
    insert into sys_log (id, type, target_id, 
      operator, operate_time, operate_ip, 
      status, old_value, new_value
      )
    values (#{id}, #{type}, #{targetId},#{operator}, #{operateTime}, #{operateIp},
      #{status}, #{oldValue}, #{newValue})
  </insert>

  <insert id="insertSelective" parameterType="cn.peyton.spring.log.entity.SysLogWithBLOBs"
          keyProperty="id" useGeneratedKeys="true" >
    insert into sys_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="targetId != null" >
        target_id,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="operateTime != null" >
        operate_time,
      </if>
      <if test="operateIp != null" >
        operate_ip,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="oldValue != null" >
        old_value,
      </if>
      <if test="newValue != null" >
        new_value,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id},
      </if>
      <if test="type != null" >
        #{type},
      </if>
      <if test="targetId != null" >
        #{targetId},
      </if>
      <if test="operator != null" >
        #{operator},
      </if>
      <if test="operateTime != null" >
        #{operateTime},
      </if>
      <if test="operateIp != null" >
        #{operateIp},
      </if>
      <if test="status != null" >
        #{status},
      </if>
      <if test="oldValue != null" >
        #{oldValue},
      </if>
      <if test="newValue != null" >
        #{newValue},
      </if>
    </trim>
  </insert>

    <update id="updateByPrimaryKeySelective" parameterType="cn.peyton.spring.log.entity.SysLogWithBLOBs" >
    update sys_log
    <set >
      <if test="type != null" >
        type = #{type},
      </if>
      <if test="targetId != null" >
        target_id = #{targetId},
      </if>
      <if test="operator != null" >
        operator = #{operator},
      </if>
      <if test="operateTime != null" >
        operate_time = #{operateTime},
      </if>
      <if test="operateIp != null" >
        operate_ip = #{operateIp},
      </if>
      <if test="status != null" >
        status = #{status},
      </if>
      <if test="oldValue != null" >
        old_value = #{oldValue},
      </if>
      <if test="newValue != null" >
        new_value = #{newValue},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.peyton.spring.log.entity.SysLogWithBLOBs" >
    update sys_log
    set type = #{type},
      target_id = #{targetId},
      operator = #{operator},
      operate_time = #{operateTime},
      operate_ip = #{operateIp},
      status = #{status},
      old_value = #{oldValue},
      new_value = #{newValue}
    where id = #{id}
  </update>

  <update id="updateByPrimaryKey" parameterType="cn.peyton.spring.log.entity.SysLog" >
    update sys_log
    set type = #{type},
      target_id = #{targetId},
      operator = #{operator},
      operate_time = #{operateTime},
      operate_ip = #{operateIp},
      status = #{status}
    where id = #{id}
  </update>

    <!--   -->

    <sql id="queryConditions">
        <where>
            <if test="dto.type != null">
                AND type =#{dto.type}
            </if>
            <if test="dto.beforeSeq != null and dto.beforeSeq != ''">
                AND old_value LIKE CONCAT('%', #{dto.beforeSeq},'%')
            </if>
            <if test="dto.afterSeq != null and dto.afterSeq != ''">
                AND new_value LIKE CONCAT('%', #{dto.afterSeq},'%')
            </if>
            <if test="dto.operator != null and dto.operator != ''">
                AND operator LIKE CONCAT('%', #{dto.operator},'%')
            </if>
            <if test="dto.fromTime != null">
                AND operate_time &gt;= #{dto.fromTime}
            </if>
            <if test="dto.toTime != null">
                AND operate_time &lt;= #{dto.toTime}
            </if>

        </where>
    </sql>

    <select id="countBySearch" parameterType="cn.peyton.spring.log.dto.SearchLogDto" resultType="int">
        SELECT COUNT(1)
        from sys_log
        <include refid="queryConditions"/>
    </select>
    
    <select id="getPageListBySerach" parameterType="map" resultMap="ResultMapWithBLOBs">
        SELECT
        <include refid="Base_Column_List" /> , <include refid="Blob_Column_List" />
        from sys_log
        <include refid="queryConditions"/>
        ORDER BY operate_time DESC
        limit #{page.offset},#{page.pageSize}
    </select>
</mapper>