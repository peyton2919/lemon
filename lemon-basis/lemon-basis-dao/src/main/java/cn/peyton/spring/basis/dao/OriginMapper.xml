<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.peyton.spring.basis.dao.OriginMapper">
	<resultMap id="BaseResultMap" type="cn.peyton.spring.basis.entity.Origin">
		<id column="id" property="id" jdbcType="INTEGER"/>
		<result column="ori_name" property="oriName" jdbcType="VARCHAR"/>
		<result column="ori_explain" property="oriExplain" jdbcType="VARCHAR"/>
	</resultMap>

	<sql id="Base_Column_List">
		id,ori_name,ori_explain
	</sql>

	<insert id="insert" parameterType="cn.peyton.spring.basis.entity.Origin" keyProperty="id" useGeneratedKeys="true">
		insert into tb_origin(id,ori_name,ori_explain)
		values (#{id},#{oriName},#{oriExplain})
	</insert>

	<insert id="insertSelective" parameterType="cn.peyton.spring.basis.entity.Origin" keyProperty="id" useGeneratedKeys="true">
		insert into tb_origin
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="oriName != null">
				ori_name,
			</if>
			<if test="oriExplain != null">
				ori_explain,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id},
			</if>
			<if test="oriName != null">
				#{oriName},
			</if>
			<if test="oriExplain != null">
				#{oriExplain},
			</if>
		</trim>
	</insert>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from tb_origin
		where id = #{id}
	</delete>

	<update id="updateByPrimaryKeySelective" parameterType="cn.peyton.spring.basis.entity.Origin">
		update tb_origin
		<set>
			<if test="oriName != null">
				ori_name = #{oriName},
			</if>
			<if test="oriExplain != null">
				ori_explain = #{oriExplain},
			</if>
		</set>
		where id = #{id}
	</update>

	<update id="updateByPrimaryKey" parameterType="cn.peyton.spring.basis.entity.Origin">
		update tb_origin
		set 
			ori_name = #{oriName},
			ori_explain = #{oriExplain}
		where id = #{id}
	</update>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List"/>
		from tb_origin
		where id = #{id}
	</select>


	<!-- new create method   -->
    <select id="selectByAll" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        FROM tb_origin
        ORDER BY id DESC
        limit #{page.offset},#{page.pageSize}
    </select>

    <select id="count" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM tb_origin
    </select>

    <select id="selectLikeByKeyword" resultMap="BaseResultMap" parameterType="map">
        select DISTINCT
        <include refid="Base_Column_List"/>
        FROM tb_origin
        WHERE 1 = 1
        <if test="keyword != null and keyword != ''">
            AND (
            ori_name LIKE concat('%',#{keyword},'%')
            OR ori_explain LIKE concat('%',#{keyword},'%'))
        </if>
        ORDER BY id DESC
        limit #{page.offset},#{page.pageSize}
    </select>

    <select id="countLikeByKeyword" resultType="java.lang.Integer" parameterType="string">
        SELECT DISTINCT COUNT(1)
        FROM tb_origin
        WHERE 1 = 1
        <if test="keyword != null and keyword != ''">
            AND (
            ori_name LIKE concat('%',#{keyword},'%')
            OR ori_explain LIKE concat('%',#{keyword},'%'))
        </if>
    </select>

    <select id="selectBySelect" resultMap="BaseResultMap">
        SELECT id,ori_name
        FROM tb_origin
        ORDER BY id DESC
    </select>

    <select id="countByName" parameterType="map" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM tb_origin
        WHERE ori_name = #{name}
        <if test="id != null">
            AND id != #{id}
        </if>
    </select>

</mapper>
